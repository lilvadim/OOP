Index: src/main/java/ru.nsu.vadim/App.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru.nsu.vadim/App.java b/src/main/java/ru/nsu/vadim/App.java
rename from src/main/java/ru.nsu.vadim/App.java
rename to src/main/java/ru/nsu/vadim/App.java
--- a/src/main/java/ru.nsu.vadim/App.java	(revision 575946912bb24ab6049e04f85ae69e32c82fa34f)
+++ b/src/main/java/ru/nsu/vadim/App.java	(date 1632210554157)
@@ -13,10 +13,10 @@
             arr[i] = input.nextInt();
         }
 
-        Sort.Elem[] res = Sort.heapSort(arr);
+        Sort.heapSort(arr);
 
         for (int i = 0; i < n; i++) {
-            System.out.println(res[i].key);
+            System.out.println(arr[i]);
         }
     }
 }
Index: src/main/java/ru.nsu.vadim/Sort.java
===================================================================
diff --git a/src/main/java/ru.nsu.vadim/Sort.java b/src/main/java/ru.nsu.vadim/Sort.java
deleted file mode 100644
--- a/src/main/java/ru.nsu.vadim/Sort.java	(revision 575946912bb24ab6049e04f85ae69e32c82fa34f)
+++ /dev/null	(revision 575946912bb24ab6049e04f85ae69e32c82fa34f)
@@ -1,85 +0,0 @@
-package ru.nsu.vadim;
-
-public class Sort {
-    public static class Elem {
-        int key;
-        int value;
-    }
-    public static Elem[] heapSort(int[] array){
-        Elem[] heapArr = new Elem[array.length];
-        int[] size = {0};
-        for (int j : array) {
-            add(heapArr, size, j, 1);
-        }
-        Elem[] res = new Elem[array.length];
-        for (int i = 0; i < array.length; i++) {
-            res[i] = extractMin(heapArr, size);
-        }
-        return res;
-    }
-    private static void swap (Elem[] heapArr, int parentIdx, int childIdx) {
-        Elem temp = heapArr[parentIdx];
-        heapArr[parentIdx] = heapArr[childIdx];
-        heapArr[childIdx] = temp;
-    }
-
-    private static void siftUp (Elem[] heapArr, int childIdx) {
-        if (childIdx == 0) return;
-        int parentIdx = (childIdx - 1) / 2;
-
-        if (heapArr[parentIdx].key > heapArr[childIdx].key) {
-            swap(heapArr, parentIdx, childIdx);
-            siftUp(heapArr, parentIdx);
-        }
-    }
-
-    private static void siftDown(Elem[] heapArr, int size, int parentIdx) {
-        int childLeft = parentIdx * 2 + 1;
-        int childRight = parentIdx * 2 + 2;
-
-        if ((parentIdx >= size - 1) || ((childLeft > size - 1) && (childRight > size - 1))) {
-            return;
-        }
-
-        if ((childLeft <= size - 1) && (childRight <= size - 1)) {
-            int minChildIdx;
-            if (heapArr[childLeft].key > heapArr[childRight].key)
-                minChildIdx = childRight;
-            else
-                minChildIdx = childLeft;
-
-            if (heapArr[parentIdx].key > heapArr[minChildIdx].key) {
-                swap(heapArr, parentIdx, minChildIdx);
-                siftDown(heapArr, size, minChildIdx);
-            }
-        }
-        else {
-            int childIdx;
-            if (childLeft <= size - 1)
-                childIdx = childLeft;
-            else childIdx = childRight;
-
-            if (heapArr[parentIdx].key > heapArr[childIdx].key) {
-                swap(heapArr, parentIdx, childIdx);
-                siftDown(heapArr, size, childIdx);
-            }
-        }
-    }
-
-    public static void add (Elem[] heapArr, int[] size, int key, int value) {
-        Elem newElem = new Elem();
-        newElem.key = key;
-        newElem.value = value;
-
-        heapArr[size[0]++] = newElem;
-        siftUp(heapArr, size[0] - 1);
-    }
-
-    public static Elem extractMin (Elem[] heapArr, int[] size) {
-        Elem res = heapArr[0];
-        size[0]--;
-        swap(heapArr, 0, size[0]);
-        siftDown(heapArr, size[0], 0);
-        return res;
-    }
-}
Index: src/main/java/ru/nsu/vadim/Sort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/nsu/vadim/Sort.java b/src/main/java/ru/nsu/vadim/Sort.java
new file mode 100644
--- /dev/null	(date 1632210786944)
+++ b/src/main/java/ru/nsu/vadim/Sort.java	(date 1632210786944)
@@ -0,0 +1,74 @@
+package ru.nsu.vadim;
+
+public class Sort {
+    public static void heapSort(int[] array) {
+        int[] size = {0};
+        for (int i = 0; i < array.length; i++) {
+            heapify(array, size);
+        }
+        for (int i = 0; i < array.length; i++) {
+            array[i] = extractMin(array, size);
+        }
+    }
+
+    private static void swap(int[] arr, int parentIdx, int childIdx) {
+        int temp = arr[parentIdx];
+        arr[parentIdx] = arr[childIdx];
+        arr[childIdx] = temp;
+    }
+
+    private static void siftUp(int[] arr, int childIdx) {
+        if (childIdx == 0) return;
+        int parentIdx = (childIdx - 1) / 2;
+
+        if (arr[parentIdx] > arr[childIdx]) {
+            swap(arr, parentIdx, childIdx);
+            siftUp(arr, parentIdx);
+        }
+    }
+
+    private static void siftDown(int[] arr, int size, int parentIdx) {
+        int childLeft = parentIdx * 2 + 1;
+        int childRight = parentIdx * 2 + 2;
+
+        if ((parentIdx >= size - 1) || ((childLeft > size - 1) && (childRight > size - 1))) {
+            return;
+        }
+
+        if ((childLeft <= size - 1) && (childRight <= size - 1)) {
+            int minChildIdx;
+            if (arr[childLeft] > arr[childRight])
+                minChildIdx = childRight;
+            else
+                minChildIdx = childLeft;
+
+            if (arr[parentIdx] > arr[minChildIdx]) {
+                swap(arr, parentIdx, minChildIdx);
+                siftDown(arr, size, minChildIdx);
+            }
+        } else {
+            int childIdx;
+            if (childLeft <= size - 1)
+                childIdx = childLeft;
+            else childIdx = childRight;
+
+            if (arr[parentIdx] > arr[childIdx]) {
+                swap(arr, parentIdx, childIdx);
+                siftDown(arr, size, childIdx);
+            }
+        }
+    }
+
+    public static void heapify(int[] arr, int[] size) {
+        size[0]++;
+        siftUp(arr, size[0] - 1);
+    }
+
+    public static int extractMin(int[] arr, int[] size) {
+        int res = arr[0];
+        size[0]--;
+        swap(arr, 0, size[0]);
+        siftDown(arr, size[0], 0);
+        return res;
+    }
+}
